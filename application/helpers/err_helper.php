<?php if (!defined('BASEPATH')) exit('No direct script access allowed');
/**
* Sensibly report of errors that occur in the system by sending that
* error to the developer
* Author: Matt Carter <m@ttcarter.com>
* Info: http://hash-bang.net/2009/02/error-reporting-with-cierror-reporting-with-ci/
*/

 
// Relative location of PHP mailer to this file
// (Not relative to the working directory because that doesn't specify correctly with fatal errors).
// By default this assumes that the 'phpMailer' folder is located in the same directory as this script.

function err($errno, $errstr, $errfile, $errline, $errcontext)
{
	/*
	 * When @ is used somewhere in the code - we need to skip processing 
	 * errors for that particular occurance
	 * @url - http://anvilstudios.co.za/blog/php/how-to-ignore-errors-in-a-custom-php-error-handler/
	 * 
	 * @author T.Turczynski
	 */
	if (error_reporting() === 0) {
		// continue script execution, skipping standard PHP error handler
		return TRUE;
	}

	$CI =& get_instance();
	$CI->load->library(array('session'));

	/*
	 * Workaround for Facebook message:
	 * Uncaught Exception: 190: Error validating access token: Session has expired at unix time
	 * When that error occurs users need to be redirected back to Facebook page
	 * 
	 * @author T.Turczynski
	 */
	if (strpos($errstr, '190: Error validating access token: Session has expired at unix time') !== FALSE)
	{
		header('Location: ' . $CI->fb_ignited->globals['fb_redirect']);
		exit;
	}

	$errtable = array(
		// E_ERROR - Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
		1 => 'Fatal',
		// E_WARNING - Run-time warnings (non-fatal errors). Execution of the script is not halted.	
		2 => 'Warning',
		// E_PARSE - Compile-time parse errors. Parse errors should only be generated by the parser.
		4 => 'Parse Error',
		// E_NOTICE - Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.
		8 => 'Notice',
		// E_CORE_ERROR - Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.
		16 => 'Core Error',
		// E_CORE_WARNING - Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.
		32 => 'Core Warning',
		// E_COMPILE_ERROR - Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.
		64 => 'Compile Error',
		// E_COMPILE_WARNING - Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.
		128 => 'Compile Warning',
		// E_USER_ERROR - User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().
		256 => 'User Error',
		// E_USER_WARNING - User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().
		512 => 'User Warning',
		// E_USER_NOTICE - User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().
		1024 => 'User Notice',
		// E_STRICT - Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.
		2048 => 'Strict Notice',
		// E_RECOVERABLE_ERROR - Catchable fatal error. It indicates that a probably dangerous error occured, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR.
		4096 => 'Recoverable Error',
		// E_DEPRECATED - Run-time notices. Enable this to receive warnings about code that will not work in future versions.
		8192 => 'Deprecated',
		// E_USER_DEPRECATED - User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().
		16384 => 'User Deprecated',
	);

	/**
	 * According to PHP documentation, script should be halted on those errors.
	 * http://www.php.net/manual/en/errorfunc.constants.php
	 * 
	 * @author T.Turczynski
	 */
	$halt_on_error = array(
		1, 16, 64, 256, 4096
	);

	$message = "<style>";
	$message .= ".err-box {border: 1px solid #4A98AF}";
	$message .= ".err-table th {background: #4A98AF; text-align: right; white-space: nowrap}";
	$message .= ".err-table td, .err-table th {padding: 5px}";
	$message .= ".err-table-stack th {background: #4A98AF; text-align: left}";
	$message .= ".err-table-stack th, .err-table-stack td {font-size: 12px}";
	$message .= "</style>";
	$message .= "<div class=\"err-box\">";
	$message .= "<table class=\"err-table\">";
	$message .= "<tr><th width=\"100px\">Type:</th><td>{$errtable[$errno]}</td></tr>";
	$message .= "<tr><th>Error:</th><td>$errstr</td></tr>";
	$message .= "<tr><th>File:</th><td>$errfile</td></tr>";
	$message .= "<tr><th>Line:</th><td>$errline</td></tr>";
	//$message .= "<tr><th>Context:</th><td>" . print_r($errcontext) . "</td></tr>";
	$message .= "</table>";

	$traces = debug_backtrace();
	array_shift($traces);
	if ( (count($traces) > 1) && ($traces[0]['function'] != 'err_shutdown') )
	{
		$message .= "<table width=\"100%\" class=\"err-table-stack\"><tr><th width=\"50px\">Line</th><th>Function</th>";
		foreach ($traces as $offset => $trace)
		{
			// Calculate line number
			if ($offset == 0)
			{
				// First in trace
				$message .= "<tr><td style=\"text-align: center\">$errline</td><td>";
			}
			else
			{
				// Nth in trace
				$message .= "<tr><td style=\"text-align: center\">" . (isset($trace['line']) ? $trace['line'] : '&nbsp;') . "</td><td>";
			}
			// Calculate arg stack
			$trace['argstack'] = '';
			if (isset($trace['args']) && $trace['args'])
			{
				foreach ($trace['args'] as $arg)
				{
					$trace['argstack'] .= _err_human($arg) . ' , ';
				}
				if ($trace['argstack'])
				{
					$trace['argstack'] = substr($trace['argstack'], 0, -3);
				}
			}
			// Output context
			if (isset($trace['object']))
			{
				// Object error
				$message .= "{$trace['class']}->{$trace['function']}({$trace['argstack']})";
			}
			else
			{
				// Function error
				$message .= "{$trace['function']}({$trace['argstack']})";
			}
			$message .= "</td></tr>";
		}
		$message .= "</table>";
	}
	$message .= "</div>";

	if (defined('ERR_MAIL_TO') && ENVIRONMENT != 'localhost')
	{
		if (!file_exists(PATH_PHPMAILER))
		{
			echo "Cannot find PHP mailer at this path: '" . PATH_PHPMAILER ."'. Make sure it is located there to send mails";
		}
		else
		{
			require_once(PATH_PHPMAILER);
			$mailobj = new PhpMailer();

			if (defined('ERR_MAIL_METHOD') && ERR_MAIL_METHOD == 'SMTP')
			{
				$mailobj->IsSMTP();
				$mailobj->SMTPAuth = TRUE;
				$mailobj->Host = SMTP_HOST;
				$mailobj->Port = SMTP_PORT;
				$mailobj->Username = SMTP_USER;
				$mailobj->Password = SMTP_PASS;
			}
			// enables SMTP debug information (use for testing only)
			// values 1, 2, 3, 4
			//$mail->SMTPDebug  = 0;
			$mailobj->CharSet = 'utf-8';

			//$mailobj->Sender = ERR_MAIL_SENDER;
			$mailobj->SetFrom(ERR_MAIL_FROM, ERR_MAIL_FROM_NAME);
			$mailobj->AddAddress(ERR_MAIL_TO);
			$mailobj->Subject = strtr(ERR_MAIL_SUBJECT, array(
				'[TYPE]' => $errtable[$errno],
				'[FILE]' => $errfile,
				'[BASENAME]' => basename($errfile),
				'[LINE]' => $errline,
				'[STRING]' => $errstr,
			));
			$extras = preg_split('/\s*,\s*/', ERR_MAIL_FOOTERS);
			if (in_array('GET', $extras)) $message .= _err_dump_array($_GET, 'Get');
			if (in_array('POST', $extras)) $message .= _err_dump_array($_POST, 'Post');
			if (in_array('SESSION', $extras)) $message .= _err_dump_array($CI->session->all_userdata(), 'Session');
			if (in_array('SERVER', $extras)) $message .= _err_dump_array($_SERVER, 'Server');
			if (in_array('GLOBALS', $extras)) $message .= _err_dump_array($_GLOBALS, 'Globals');
			//$mailobj->Body = $message;
			$mailobj->AltBody = "To view the message, please use an HTML compatible email viewer!";
			$mailobj->MsgHTML($message);
			$status = $mailobj->Send();

			if($status)
			{
				
			}
			else
			{
				
			}
			$mailobj->ClearAddresses();
			$mailobj->ClearAttachments();
		}
	}

	// send that error to log file as well
	error_log ('PHP ' . $errtable[$errno] . ':  ' . $errstr . ' in ' . $errfile . ' on line ' . $errline, 0 );

	// Output error message to browser if Silent mode is turned off
	if (!ERR_SILENT)
	{
		echo '<h4>A PHP Error was encountered</h4>';
		echo '<p>Severity: ' . $errtable[$errno] . '</p>';
		echo '<p>Message: ' . $errstr . '</p>';
		echo '<p>Filename: ' . $errfile . '</p>';
		echo '<p>Line Number: ' . $errline . '</p>';
	}

	// Script should be halted on those errors.
	if (in_array($errno, $halt_on_error))
	{
		exit;
	}

	return TRUE;
}
 
// Catch fatal errors
function err_shutdown()
{
	$err = error_get_last();
	if (in_array($err['type'], array(E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR)))
	{
		err($err['type'], $err['message'], $err['file'], $err['line'], 'Fatal error');
	}
}
 
function _err_human($what)
{
	if (is_object($what))
	{
		return get_class($what);
	}
	elseif (is_array($what))
	{
		return "Array[" . count($what) . "]";
	}
	else
	{
		return $what;
	}
}
 
function _err_dump_array($array, $title)
{
	if ($array)
	{
		$out = '<table class="err-table-stack">';
		$out .= "<tr><th colspan=\"2\">Dump of $title array</th></tr><tr><th>Key</th><th>Value</th></tr>";
		foreach (array_keys($array) as $key)
		{
			$out .= "<tr><th>$key</th><td>" . _err_human($array[$key]) . "</td></tr>";
		}
		$out .= '</table>';
	}
	else
	{
		$out = "<div>$title is empty</div>";
	}
	return $out;
}

set_error_handler('err', E_ALL);
register_shutdown_function('err_shutdown');
